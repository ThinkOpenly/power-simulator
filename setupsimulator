#!/usr/bin/env python

"""
Author(s):  Rafael Sene  <rpsene@br.ibm.com>

Copyright (c) 2016 IBM Corporation

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
Redistributions of source code must retain the above copyright
notice, this list of conditions and the following disclaimer.
Redistributions in binary form must reproduce the above copyright
notice, this list of conditions and the following disclaimer in the
documentation and/or other materials provided with the distribution.
Neither the name of the IBM Corporation nor the names of its
contributors may be used to endorse or promote products derived from
this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL IBM CORPORATION BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
DAMAGE.
"""

from os.path import expanduser
import subprocess
import urllib2
import zipfile
import os
import sys
import pwd
import socket
import time

COMMON_FILES = ["./packages/rootfsfiles"]

LICENSES = ["./packages/license"]

VERSIONS = ["/opt/ibm/systemsim-p8", "/opt/ibm/systemsim-p9"]

DEPENDENCIES = ["tunctl", "xterm", "bzip2"]

DISK = "/debian-ppc64le.img"

DISK_SYM_LINK = "/disk.img"

HOME = expanduser("~")

DOWNLOAD_DIR = HOME + "/systemsim_execution/"

MOUNT_POINT = "/tmp/systemsimdiskimage"

LICENSE_FILE_ZIP = DOWNLOAD_DIR + "/L-LJLT-9Q4D8R.zip"

LICENSE = DOWNLOAD_DIR + "/L-LJLT-9Q4D8R/Softcopy/LA_en"

LOCKFILE = DOWNLOAD_DIR + "/.sysmsimcustomlock"

UBUNTU = "Ubuntu"

FEDORA = "Fedora"

SUSE = "SUSE"

SUSEREPO = "http://download.opensuse.org/repositories/network:utilities/SLE_12_SP1/network:utilities.repo"

class setupsimulator():

    """get distro name"""
    def getDistro(self):
        with open("/etc/os-release") as f:
            lines = f.readlines()
            return lines[0].split("=", 1)[1].replace("\"", "")

    """execute a cmd"""
    def executeCmd(self, command, arguments):
        cmd = [command, arguments]
        p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE)
        out, err = p.communicate()
        return out

    """check if a command exists"""
    def cmdExists(self, command):
        subp = subprocess.call("type " + command, shell=True,
        stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        return (subp == 0);

    """check the internet connectivity"""
    def isConnectedInternet(self):
        try:
            socket.create_connection(("23.202.38.212", 80), 2)
            return True
        except IOError:
            return False

    """get username"""
    def getUserName(self):
        return pwd.getpwuid(os.getuid())[0]

    """check if a directory exists"""
    def directoryExists(self, location):
        return os.path.exists(location)

    """check if a file exists"""
    def fileExists(self, location):
        return os.path.isfile(location)

    """create a directory"""
    def createDirectory(self, location):
        if not self.directoryExists(location):
            if not os.path.exists(location):
                os.makedirs(location)

    """clean a directory"""
    def removeDirectory(self, location):
        self.printLine()
        opt = raw_input(" * Would you like to clean " + location + "? [Y/N] ")
        if "Y" in opt or "y" in opt:
            if self.directoryExists(location):
                os.system("rm -rf " + location + "/*")
                self.printLine()
        elif "N" in opt or "n" in opt:
            pass
        else:
            print "    * Please, select one of the available options: Y or N"
            sys.exit()

    """install RPM file"""
    def installRPM(self, package):
        try:
            if self.cmdExists("dnf"):
                os.system("sudo dnf install -y " + package)
            elif self.cmdExists("zypper"):
                os.system("sudo zypper --non-interactive install " + package)
            else:
                os.system("sudo yum install -y " + package)
        except (KeyboardInterrupt, SystemExit, RuntimeError):
            raise
            sys.exit()

    """install DEB file"""
    def installDEB(self, package):
        try:
            os.system("sudo dpkg -i " + package)
            os.system("sudo apt-get -fy install")
        except (KeyboardInterrupt, SystemExit, RuntimeError):
            raise
            sys.exit()

    """install DEB file"""
    def installDEBApt(self, package):
        try:
            os.system("sudo apt-get -y install " + package)
        except (KeyboardInterrupt, SystemExit, RuntimeError):
            raise
            sys.exit()

    """remove RPM file"""
    def removeRPM(self, package):
        try:
            os.system("sudo rpm -e " + package)
        except (KeyboardInterrupt, SystemExit, RuntimeError):
            raise
            sys.exit()

    """remove DEB file"""
    def removeDEB(self, package):
        try:
            os.system("sudo apt-get purge -y " + package)
        except (KeyboardInterrupt, SystemExit, RuntimeError):
            raise
            sys.exit()

    """configure the image, copying the configurerepos.sh into it."""
    def configureImage(self, disk_img):
        try:
            # create mount point
            os.system("sudo mkdir " + MOUNT_POINT)
            # mount images
            os.system("sudo mount -o loop " + disk_img + " " + MOUNT_POINT)
            # copy file inside the images
            os.system("sudo cp -rp ./repos/configurerepos.sh " + MOUNT_POINT + "/home")
            # umount
            os.system("sudo umount " + MOUNT_POINT)
            # remove mount point
            os.system("sudo rm -rf " + MOUNT_POINT)
            # create lock file that block continuing customization
            os.system("touch " + LOCKFILE)
            print "done"
        except (KeyboardInterrupt, SystemExit, RuntimeError, OSError, IOError):
            print "\n   ERROR: could not configure the " + disk_img
            print "   exiting now!"
            sys.exit()

    """verify if the required dependencies are installed"""
    def verifyDependencies(self):
        self.printLine()
        print " * Checking dependencies..."
        try:
            for dep in DEPENDENCIES:
                if not self.cmdExists(dep):
                    self.installDependencies(dep)
        except (KeyboardInterrupt, SystemExit, RuntimeError):
            sys.exit()

    """install the required dependencies"""
    def installDependencies(self, dep):
        try:
            if UBUNTU in setupsimulator().getDistro():
                if dep == "tunctl":
                    self.installDEBApt("uml-utilities")
                else:
                    self.installDEBApt(dep)
            elif SUSE in setupsimulator().getDistro():
                if dep == "tunctl":
                    os.system("sudo zypper addrepo " + SUSEREPO)
                    os.system("sudo zypper refresh")
                    self.installRPM(dep)
            else:
                self.installRPM(dep)
        except (KeyboardInterrupt, SystemExit, RuntimeError):
            sys.exit()

    """return the size of file formated"""
    def sizeOf(self, n):
        for u in ['', 'Ki', 'Mi']:
            if abs(n) < 1024.0:
                return "%3.1f %s%s" % (n, u, 'B')
            n = n / 1024.0
        return "%.1f%s%s" % (n, 'Yi', 'B')

    """download"""
    def download(self, baseURL, fileName, location):
        try:
            dBlockSize = 10240
            dUrlInfo = urllib2.urlopen(baseURL + fileName)
            dFile = open(location + "/" + fileName, 'wb')
            dMeta = dUrlInfo.info()
            print "   \\__(%s)" % (self.sizeOf(int(dMeta.getheaders("Content-Length")[0]))),
            while True:
                dBuffer = dUrlInfo.read(dBlockSize)
                if not dBuffer:
                    break
                dFile.write(dBuffer)
            dFile.close()
            print "done."
        except (OSError, IOError):
            print "\n   ERROR: could not download " + fileName + ". Check if the location"
            print "   " + baseURL + " is available."

    """verifies the packages integrity"""
    def checkSum(self, location, checksumfile):
        self.printLine()
        if self.fileExists(location + checksumfile):
            print "Checking the files integrity..."
            os.system("cd " + location + " && md5sum -c " + checksumfile)
        else:
            print "\n   ERROR: could not verify the files integrity. The file " + checksumfile
            print "   " + "is not available."

    """extract and convert the license from dos to unix"""
    def configureLicense(self):
        try:
            licensezip = zipfile.ZipFile(LICENSE_FILE_ZIP, 'r')
            licensezip.extractall(DOWNLOAD_DIR)
            licensezip.close()
            licensetext = open(LICENSE, 'rb').read().replace('\r\n', '\n')
            open(LICENSE, 'wb').write(licensetext)
        except (OSError, IOError):
            print "\n   ERROR: could not configure the license."

    """read license"""
    def readLicense(self):
        try:
            # ask if the user wants to read the license
            self.printLine()
            opt = raw_input(" * Would you like to read the license? [Y/N] ")
            if "Y" in opt or "y" in opt:
                os.system("vi " + LICENSE)
                print ""
            elif "N" in opt or "n" in opt:
                pass
            else:
                print "    * Please, select one of the available options: Y or N"
                sys.exit()
            # ask if the user agrees with the license
            opt = raw_input(" * Do you agree with the license? [Y/N] ")
            if "Y" in opt or "y" in opt:
                return True
            else:
                self.printLine()
                sys.exit()
        except (KeyboardInterrupt, SystemExit, RuntimeError):
            sys.exit()

    """print the initial message"""
    def prettyprint(self, action):
        print "\n " + action + " the POWER Functional Simulator.\n"
        print " WARNING: Ensure you are running this script as an user"
        print "          with admin rights. You will be prompt to enter"
        print "          your password during this process.\n"

    """print a line"""
    def printLine(self):
        print "----------------------------------------------"

"""  Here starts the main execution """
try:
    os.system("clear")
    """
    Timer to track the excution time
    """
    start_time = time.time()
    """
    Read the command line inputs which can be either -i for install
    or -u for removal: setupsimulator -i or setupsimulator -u
    """
    if len(sys.argv) > 2 or len(sys.argv) < 2:
        print "\n * Run this script using either of the options:"
        print " * To install: setupsimulator -i"
        print " * To uninstall: setupsimulator -u\n"
        sys.exit()
    else:
        """
        Check Internet connection.
        """
        if  setupsimulator().isConnectedInternet() is False:
            print "Looks like you do not have Internet access. Fix this issue and try again."
            sys.exit()

        """
        Installation
        """
        if str(sys.argv[1]) == "-i":
            setupsimulator().prettyprint("Installing")

            """
            Check and install missing dependencies.
            """
            setupsimulator().verifyDependencies()

            """
            Create a directory where all packages will be stored.
            """
            if setupsimulator().directoryExists(DOWNLOAD_DIR):
                setupsimulator().removeDirectory(DOWNLOAD_DIR)
            else:
                setupsimulator().createDirectory(DOWNLOAD_DIR)
            """
            Configure the license.
            """
            for l in LICENSES:
                with open(l) as f:
                    FTPURL = f.readline().strip('\n')
                    PACKAGES = f.readlines()
                for r in range (len(PACKAGES)):
                    if not (setupsimulator().fileExists(DOWNLOAD_DIR + "/" + PACKAGES[r].strip('\n'))):
                        print " * Downloading " + PACKAGES[r].strip('\n')
                        setupsimulator().download(FTPURL, PACKAGES[r].strip('\n'), DOWNLOAD_DIR)
            setupsimulator().configureLicense()
            """
            Start the installation process if the user agrees with the license.
            """
            if setupsimulator().readLicense():
                setupsimulator().printLine()
                """
                Download the necessary packages. They are stored into the files
                license and simulator. The first line contains the base URI and the
                rest of the file contains the packages.
                """
                for download in COMMON_FILES:
                    with open(download) as f:
                        FTPURL = f.readline().strip('\n')
                        PACKAGES = f.readlines()
                    for r in range (len(PACKAGES)):
                        if not (setupsimulator().fileExists(DOWNLOAD_DIR + "/" + PACKAGES[r].strip('\n'))):
                            print " * Downloading " + PACKAGES[r].strip('\n')
                            setupsimulator().download(FTPURL, PACKAGES[r].strip('\n'), DOWNLOAD_DIR)

                if UBUNTU in setupsimulator().getDistro():
                    downloadFile = "./packages/distros/ubuntu"
                elif FEDORA in setupsimulator().getDistro():
                    downloadFile = "./packages/distros/fedora"
                else:
                    downloadFile = "./packages/distros/suserhelcentos"
                with open(downloadFile) as f:
                    PACKAGES = f.readlines()
                    for r in range (len(PACKAGES)):
                        # brake the file remote location
                        aux = PACKAGES[r].split("/")
                        # gets the last index with contains the package name
                        symPackage = aux[len(aux) - 1]
                        # remove the last item
                        aux.pop()
                        # concatenates creating the URL
                        FTPURL = '/'.join(aux)
                        if not (setupsimulator().fileExists(DOWNLOAD_DIR + "/" + symPackage.strip('\n'))):
                            print " * Downloading " + symPackage.strip('\n')
                            setupsimulator().download(FTPURL + "/", symPackage.strip('\n'), DOWNLOAD_DIR)

                setupsimulator().checkSum(DOWNLOAD_DIR, "checklist.md5")
                """
                Install the simulator packages for p8 and p9 according the host distro.
                """
                for v in VERSIONS:
                    if not setupsimulator().directoryExists(v):
                        setupsimulator().printLine()
                        print "Installing the simulator packages..."
                        if UBUNTU in setupsimulator().getDistro():
                            for debPackage in os.listdir(DOWNLOAD_DIR):
                                if debPackage.endswith(".deb"):
                                    setupsimulator().installDEB(DOWNLOAD_DIR + "/" + debPackage)
                        else:
                            for rpmPackage in os.listdir(DOWNLOAD_DIR):
                                if rpmPackage.endswith(".rpm"):
                                    setupsimulator().installRPM(DOWNLOAD_DIR + "/" + rpmPackage)

                """
                Extract the bzip2 file which contains the Debian sysroot.
                """
                FULLPATH = DOWNLOAD_DIR + DISK
                if not setupsimulator().fileExists(FULLPATH):
                    if setupsimulator().fileExists(FULLPATH + ".bz2"):
                        setupsimulator().printLine()
                        print "Extracting the image (it will take a while)..."
                        try:
                            os.system("bzip2 -dkv " + FULLPATH + ".bz2")
                        except (OSError, IOError):
                            print "\n   ERROR: could not extract " + FULLPATH + ". Aborting."
                            sys.exit()
                    else:
                        print "\n   ERROR: could not find" + FULLPATH + ".bz2."
                        print "   exiting now!"
                        sys.exit()

                if not setupsimulator().fileExists(LOCKFILE):
                    setupsimulator().printLine()
                    print "Customizing the image..."
                    setupsimulator().configureImage(FULLPATH)

                """
                Configure a symlink to be used by the tcl script.
                """
                if not setupsimulator().fileExists(DOWNLOAD_DIR + DISK_SYM_LINK):
                    os.system("ln -s " + DOWNLOAD_DIR + DISK + " " + DOWNLOAD_DIR + DISK_SYM_LINK)

                """
                Copy the startsimulator.py to the directory where all files where downloaded.
                """
                os.system("cp -rp ./scripts/startsimulator " + DOWNLOAD_DIR)
                setupsimulator().printLine()
                print("Execution time: %s seconds." % (time.time() - start_time))
                print "\nSimulator files are located at " + DOWNLOAD_DIR
                os.system("cd " + DOWNLOAD_DIR)
                print "\nRun startsimulator [-p8 or -p9] to start the simulator from the command line or"
		print "select POWER Simulator > Start from the whithin the SDK."
		print "\nThe default credentials to access the simulator are: user=root/pwd=mambo"
        # remove
        elif str(sys.argv[1]) == "-u":
            os.system("clear")
            setupsimulator().prettyprint("Removing")
            if UBUNTU in setupsimulator().getDistro():
                for p in VERSIONS:
                    if setupsimulator().directoryExists(p):
                        setupsimulator().removeDEB(p.split("/")[3])
            else:
                for p in VERSIONS:
                    if setupsimulator().directoryExists(p):
                        setupsimulator().removeRPM(p.split("/")[3])
            setupsimulator().printLine()
            print("Execution time: %s seconds." % (time.time() - start_time))
        else:
            print "Could not proceed with the script execution."
            sys.exit()
except (KeyboardInterrupt, SystemExit, RuntimeError):
    sys.exit()
